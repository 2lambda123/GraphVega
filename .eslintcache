[{"D:\\GraphVega\\src\\index.js":"1","D:\\GraphVega\\src\\App.js":"2","D:\\GraphVega\\src\\reportWebVitals.js":"3","D:\\GraphVega\\src\\components\\main.jsx":"4","D:\\GraphVega\\src\\components\\quote.jsx":"5","D:\\GraphVega\\src\\components\\navTabs.jsx":"6","D:\\GraphVega\\src\\components\\chain\\optionChain.jsx":"7","D:\\GraphVega\\src\\components\\analysis\\analysis.jsx":"8","D:\\GraphVega\\src\\components\\search.jsx":"9","D:\\GraphVega\\src\\utils\\date.js":"10","D:\\GraphVega\\src\\utils\\bsm.js":"11","D:\\GraphVega\\src\\components\\chain\\expiries.jsx":"12","D:\\GraphVega\\src\\components\\chain\\positions.jsx":"13","D:\\GraphVega\\src\\components\\chain\\editLayout.jsx":"14","D:\\GraphVega\\src\\components\\analysis\\positions.jsx":"15","D:\\GraphVega\\src\\components\\chain\\optionTable.jsx":"16","D:\\GraphVega\\src\\components\\analysis\\lineChart.jsx":"17","D:\\GraphVega\\src\\components\\chain\\editLayoutModal.jsx":"18","D:\\GraphVega\\src\\components\\chain\\option.jsx":"19"},{"size":576,"mtime":1613415326598,"results":"20","hashOfConfig":"21"},{"size":254,"mtime":1613415326594,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1613415326598,"results":"23","hashOfConfig":"21"},{"size":5151,"mtime":1613460154979,"results":"24","hashOfConfig":"21"},{"size":1899,"mtime":1613415326597,"results":"25","hashOfConfig":"21"},{"size":861,"mtime":1613424830447,"results":"26","hashOfConfig":"21"},{"size":3551,"mtime":1613417329824,"results":"27","hashOfConfig":"21"},{"size":4507,"mtime":1613415326594,"results":"28","hashOfConfig":"21"},{"size":3468,"mtime":1613509743959,"results":"29","hashOfConfig":"21"},{"size":798,"mtime":1613415326599,"results":"30","hashOfConfig":"21"},{"size":4704,"mtime":1613415326599,"results":"31","hashOfConfig":"21"},{"size":1403,"mtime":1613415326595,"results":"32","hashOfConfig":"21"},{"size":2334,"mtime":1613415326597,"results":"33","hashOfConfig":"21"},{"size":2789,"mtime":1613415326595,"results":"34","hashOfConfig":"21"},{"size":3338,"mtime":1613417318129,"results":"35","hashOfConfig":"21"},{"size":2590,"mtime":1613415326596,"results":"36","hashOfConfig":"21"},{"size":2034,"mtime":1613417315169,"results":"37","hashOfConfig":"21"},{"size":4317,"mtime":1613422238385,"results":"38","hashOfConfig":"21"},{"size":6710,"mtime":1613417326161,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"1jetw0",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"43"},"D:\\GraphVega\\src\\index.js",["88"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Bootstrap from \"bootstrap/dist/css/bootstrap.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["89","90"],"D:\\GraphVega\\src\\App.js",[],"D:\\GraphVega\\src\\reportWebVitals.js",[],"D:\\GraphVega\\src\\components\\main.jsx",["91"],"import React, { Component } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Container,\r\n} from 'react-bootstrap';\r\nimport Search from './search';\r\nimport Quote from './quote';\r\nimport OptionChain from './chain/optionChain';\r\nimport Analysis from './analysis/analysis';\r\nimport NavTabs from './navTabs';\r\nimport axios from 'axios';\r\n\r\nclass Main extends Component {\r\n  state = {\r\n      quantity: 0,\r\n      quote:{},\r\n      positions:[],\r\n      tab: 0, //0 for chain, 1 for analysis page\r\n  }\r\n  /**\r\n   * Triggered when new stock is selected from search bar.\r\n   * @param {Object} value: Object returned from search bar \r\n   */\r\n  handleTickerChange = value => {\r\n    this.getQuote(value.symbol);\r\n    this.setState({ quote:{}, positions:[], tab:0, quantity:0 });\r\n  }\r\n\r\n  /**\r\n   * Function used to get the quote of a stock. Called when new stock\r\n   * is selected from search bar.\r\n   * @param {String} symbol: ticker of the stock \r\n   */\r\n  getQuote = (symbol) => {\r\n    this.setState({ quoteLoading: true }, () => {\r\n      const url = 'http://localhost:8000/api/stocks/quote';\r\n      axios\r\n        .post(url, {\r\n          ticker: symbol,\r\n        })\r\n        .then((res) => {\r\n          const quote = res.data.quotes.quote;\r\n          this.setState({ quote, quoteLoading: false });\r\n        });\r\n    });\r\n  };\r\n  \r\n\r\n  /**\r\n   * Function to add an option to the positions[] object\r\n   * @param {Object} option Options object to add to positions[]\r\n   */\r\n  handleAddPosition = (option) => {\r\n    var positions = [...this.state.positions];\r\n    var found = false;\r\n    for(var i = 0; i < positions.length; i++) {\r\n      if(positions[i].description === option.description){\r\n        positions[i].quantity = positions[i].quantity + option.quantity;\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    if(!found){\r\n      positions.push(option);\r\n    }\r\n    this.setState({positions});\r\n  }\r\n\r\n  /**\r\n   * Function to remove an options from positions[]\r\n   * @param {Integer} idx remove object at index 'idx' from positions[]\r\n   */\r\n  handleRemovePosition= idx => {\r\n    const positions = [...this.state.positions];\r\n    positions.splice(idx, 1);\r\n    this.setState({ positions });\r\n  }\r\n\r\n  /**\r\n   * Function handles switching tabs between OptionChain and Analysis\r\n   * @param {Integer} value: sets tab to value  \r\n   */\r\n  handleChangeTabs = value => {\r\n    if(value != this.state.tab) {\r\n      this.setState({tab:value});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds quantity to/from stock.\r\n   * @param {Object} event: triggered by adding/removing stock  \r\n   */\r\n  handleStockQuantityChange = (event) => {\r\n    var quantity = Number(event.target.value);\r\n    this.setState({quantity})\r\n  }\r\n\r\n  // Adds 1 stock (increments quantity by 1.) \r\n  handleAddStock = () => {\r\n    const quantity = this.state.quantity? this.state.quantity + 1 : 1;\r\n    this.setState({quantity});\r\n  }\r\n\r\n  // Removes 1 stock (decrements quantity by 1.) \r\n  handleRemoveStock = () => {\r\n    const quantity = this.state.quantity? this.state.quantity - 1 : -1;\r\n    this.setState({quantity});\r\n  }\r\n\r\n  // decides whether OptionChain component will be displayed or not\r\n  display = () => {\r\n    return this.state.tab === 0 ? \"block\" : \"none\";\r\n  }\r\n\r\n  // decides whether Analysis component is displayed or not.\r\n  display2 = () => {\r\n    return this.state.tab === 1? \"block\" : \"none\";\r\n  }\r\n  \r\n  render() {\r\n    return(\r\n      <>\r\n      <Container>\r\n        <Row>\r\n          <Col sm={{span:4}}>\r\n            <h4 style={{marginTop:'10px'}}>\r\n              GraphVega\r\n            </h4>\r\n          </Col>\r\n          <Col lg={{ span:4, offset:4 }}>\r\n              <Search onValueChange={this.handleTickerChange}/>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Row>\r\n          <Col sm={{span:12}}>\r\n            <Quote \r\n              quote={this.state.quote} \r\n              quantity={this.state.quantity}\r\n              onStockQuantityChange={this.handleStockQuantityChange}\r\n              addStock={this.handleAddStock}\r\n              removeStock={this.handleRemoveStock}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Row>\r\n          <Col sm={{span:4, offset:4}}>\r\n            <center>\r\n            <NavTabs onChangeTabs={this.handleChangeTabs}/> \r\n            </center>\r\n          </Col>\r\n        </Row>\r\n\r\n        <br />\r\n        <Row>\r\n          <Col sm={{span:12}}>\r\n            <div style={{display:this.display()}}>\r\n              <OptionChain \r\n                quote={this.state.quote} \r\n                positions={this.state.positions}\r\n                onAddPosition={this.handleAddPosition}\r\n                onRemovePosition={this.handleRemovePosition} \r\n              />  \r\n            </div>\r\n            {this.state.positions[0]?\r\n            <div style={{display:this.display2()}}>\r\n              <Analysis \r\n                positions={this.state.positions}\r\n                quote={this.state.quote}\r\n                quantity={this.state.quantity}\r\n              />\r\n            </div>\r\n            : \"\"\r\n            }  \r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Main;","D:\\GraphVega\\src\\components\\quote.jsx",[],"D:\\GraphVega\\src\\components\\navTabs.jsx",[],"D:\\GraphVega\\src\\components\\chain\\optionChain.jsx",["92"],"import React, {Component} from 'react';\r\nimport {\r\n  Row,\r\n  Col,\r\n} from 'react-bootstrap';\r\nimport {\r\n  LinearProgress,\r\n  Card,\r\n  CardContent,\r\n} from '@material-ui/core';\r\nimport Expiries from './expiries';\r\nimport EditLayout from './editLayout';\r\nimport OptionTable from './optionTable';\r\nimport Positions from './positions';\r\nimport axios from 'axios';\r\nimport clone from 'clone';\r\n\r\nclass OptionChain extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      symbol: \"\",\r\n      expiry:\"\",\r\n      calls: [],\r\n      puts: [],\r\n      layout: [\"bid\", \"ask\", \"last\"],\r\n      loading: false,\r\n    };\r\n  }\r\n\r\n\r\n\r\n  handleExpiryChange = date => {\r\n    this.getOptionChain(this.props.quote.symbol, date);\r\n  }\r\n\r\n  // Rounds number to 2 decimal points\r\n  round = num => {\r\n    return Math.round((num + Number.EPSILON) * 100)/100;\r\n  }\r\n\r\n  getOptionChain = (symbol, expiry) => {\r\n    this.setState({ loading: true }, () => {\r\n      axios\r\n        .post(\"http://localhost:8000/api/options/getChain\", {\r\n          symbol: symbol,\r\n          expiry: expiry\r\n        })\r\n        .then(res => {\r\n          const options = res.data.options.option;\r\n          const puts = options.filter(option => {\r\n            return option.option_type === \"put\";\r\n          });\r\n          const calls = options.filter(option => {\r\n            return option.option_type === \"call\";\r\n          });\r\n          \r\n          this.setState({ puts, calls, loading:false, expiry, symbol });\r\n        });\r\n    });\r\n  };\r\n\r\n  handleLayoutChange = layout => {\r\n    this.setState({layout});\r\n  }\r\n  \r\n  handleAddPosition = (idx, optionType, positionType, quantity) => {\r\n    var option = {};\r\n    var options = [];\r\n\r\n    // Find option\r\n    if(optionType===\"call\"){\r\n      option = clone(this.state.calls[idx]);\r\n      options = this.state.calls;\r\n    }\r\n    else {\r\n      option = clone(this.state.puts[idx]);\r\n      options = this.state.puts;\r\n    }\r\n\r\n    // Set position -> Long/Short\r\n    option.position = positionType;\r\n    option.quantity = quantity;\r\n\r\n    // Set expiry time\r\n    var dateTime = new Date(option.expiration_date);\r\n    dateTime.setHours(21,0,0,0);\r\n    dateTime.setDate(dateTime.getDate() + 1);\r\n    option.expiration_date = dateTime.toString();\r\n    \r\n    this.props.onAddPosition(option);\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <Card>\r\n        {this.state.loading ? <LinearProgress /> : \"\"}\r\n        <CardContent>\r\n        <Row>\r\n          <Col sm={{span:3}}>\r\n            <Expiries \r\n              symbol={this.props.quote.symbol} \r\n              onExpiryChange={this.handleExpiryChange}\r\n            />\r\n          </Col>\r\n          <Col sm={{span:2, offset:5}}>\r\n            <EditLayout onLayoutChange={this.handleLayoutChange}/>\r\n          </Col>\r\n          <Col sm={{span:2}}>\r\n            <Positions \r\n              positions={this.props.positions}\r\n              onRemovePosition={this.props.onRemovePosition}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={{span:12}}>\r\n            <OptionTable\r\n              layout={this.state.layout}\r\n              onAddToFlask={this.handleAddToFlask}\r\n              calls={this.state.calls}\r\n              puts={this.state.puts}\r\n              symbol={this.state.symbol}\r\n              expiry={this.state.expiry}\r\n              quote={this.props.quote}\r\n              onAddPosition={this.handleAddPosition}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        </CardContent>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default OptionChain;","D:\\GraphVega\\src\\components\\analysis\\analysis.jsx",[],"D:\\GraphVega\\src\\components\\search.jsx",[],"D:\\GraphVega\\src\\utils\\date.js",["93"],"const parseDate = (str) => {\r\n  var mdy = str.split('-');\r\n  return new Date(mdy[2], mdy[0]-1, mdy[1]);\r\n}\r\n\r\nexport const daysTillExpiry = (date1, date2) => {\r\n  const firstDate = new Date(date1);\r\n  const secondDate = new Date(date2);\r\n  const msPerDay = 1000 * 60 * 60 * 24;\r\n  const diff = (secondDate - firstDate)/msPerDay;\r\n  return diff < 0 ? 0 : diff;\r\n}\r\n\r\nexport const getCurrentDate = () => {\r\n  var today = new Date();\r\n  var dd = String(today.getDate()).padStart(2, '0');\r\n  var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = today.getFullYear();\r\n  today = mm + '-' + dd + '-' + yyyy;\r\n  return today;\r\n}\r\n\r\nexport const getMaxDate = (dates) => {\r\n  return new Date(Math.max.apply(null, dates.map(date => { \r\n    return new Date(date);\r\n  })));\r\n}\r\n","D:\\GraphVega\\src\\utils\\bsm.js",["94"],"import clone from 'clone';\r\nimport bs from \"black-scholes\";\r\nimport iv from \"implied-volatility\";\r\nimport {daysTillExpiry, getCurrentDate} from './date';\r\n\r\n// Set end point of the chart as 30% above the stock price\r\nconst getHigh = (price, high) => {\r\n  return price + price/3;\r\n}\r\n\r\n// Set end point of the chart as 30% above the stock price\r\nconst getLow = (price, low) => {\r\n  return price - price/3;\r\n}\r\n\r\n// Round a number to 2 decimal points\r\nconst round = (num) => {\r\n  return Math.round((num + Number.EPSILON) * 100)/100;\r\n}\r\n\r\n// Round a number to 1 decimal point\r\nconst roundOne = (num) => {\r\n  return Math.round((num + Number.EPSILON) * 10)/10;\r\n}\r\n\r\n/**  Main function used to obtain the data used in the chart.\r\n * @param {Array} positions - positions as stored in main.jsx\r\n * @param {Object} quote - quote object of stock as stored in main.jsx\r\n * @param {Integer} quantity - number of underlying shares (stored in main.jsx)\r\n * @param {String} date - date as determined by slider in analysis.jsx\r\n * @param {Float} ivChange - difference b/w average IV and new IV (slider) divided\r\n *                   by the number of positions.\r\n * @return {Array} netProfit - Array consisting of objects {underlying, price, profit} \r\n */\r\nexport const netProfitArray = (positions, quote, quantity, date, ivChange) => {\r\n  // calculate P/L for options positions\r\n  var netProfit = clone(optionPriceArray(positions[0], quote, date, ivChange));\r\n  var i = 1;\r\n  for(i=1; i<positions.length; i++) {\r\n    var array = optionPriceArray(positions[i], quote, date, ivChange);\r\n    var j = 0;\r\n    for(j=0; j<netProfit.length; j++) {\r\n      netProfit[j].price = round(netProfit[j].price + array[j].price);\r\n      netProfit[j].profit = round(netProfit[j].profit + array[j].profit);\r\n    }\r\n  }\r\n  // add stock P/L if present.\r\n  if(quantity != 0) {\r\n    netProfit = netProfit.map(obj => (\r\n      {\r\n        underlying: obj.underlying,\r\n        price: round(obj.price*100 + quantity * obj.underlying),\r\n        profit: round(obj.profit*100 + quantity * (obj.underlying - quote.last))\r\n      }\r\n    ))\r\n  }\r\n  return netProfit;\r\n}\r\n\r\n/**\r\n * @param {Array} positions - positions as stored in main.jsx' state.\r\n * @param {Object} quote - quote as stored in main.jsx' state. \r\n * @returns - average volatility of positions (number)\r\n */\r\nexport const avgVolatility = (positions, quote) => {\r\n  var vol = 0;\r\n  positions.forEach(option => {\r\n    const optionPrice = (option.ask + option.bid)/2;\r\n    const daysDiff = daysTillExpiry(getCurrentDate(), option.expiration_date);\r\n    vol += iv.getImpliedVolatility(\r\n      optionPrice, quote.last, option.strike, daysDiff/365, 0.05, option.option_type\r\n    );\r\n    console.log(vol);\r\n  });\r\n  return round(vol/positions.length);\r\n}\r\n\r\n/**  Function used to obtain the P/L data for a single option.\r\n * @param {Object} option - object storing data of the option, element of positions.\r\n * @param {Object} quote - quote object of stock as stored in main.jsx\r\n * @param {String} date - date as determined by slider in analysis.jsx\r\n * @param {Float} volChange- difference b/w average IV and new IV (slider) divided\r\n *                   by the number of positions.\r\n * @return {Array} priceArray - Array consisting of objects {underlying, price, profit} \r\n */\r\nconst optionPriceArray = (option, quote, date, volChange) => {\r\n  var priceArray = []\r\n  var optionPrice = (option.ask + option.bid)/2; // option price\r\n  var price = 0; // underlying price\r\n\r\n  // setting constants\r\n  const quantity = Math.abs(option.quantity);\r\n  const high = getHigh(quote.last, quote.week_52_high);\r\n  const low = getLow(quote.last, quote.week_52_low);\r\n  const initial = (option.ask + option.bid)/2;\r\n  const mul = option.position === \"short\" ? -1 : 1;\r\n  const interval = quote.last * 0.2/100;\r\n\r\n  // calculate default days diff\r\n  var daysDiff = daysTillExpiry(new Date().toString(), option.expiration_date);\r\n  // find volatility of the options as of today (current date)\r\n  var vol = iv.getImpliedVolatility(\r\n    optionPrice, quote.last, option.strike, daysDiff/365, 0.05, option.option_type\r\n  ) + volChange/100;\r\n  // find new daysDiff if date is adjusted by slider.\r\n  daysDiff = daysTillExpiry(date, option.expiration_date);\r\n  price = low;\r\n  // create priceArray\r\n  while(price < high) {\r\n    optionPrice = bs.blackScholes(\r\n      price, \r\n      option.strike,\r\n      daysDiff/365,\r\n      vol,\r\n      0.05,\r\n      option.option_type\r\n    );\r\n    priceArray.push({\r\n      underlying: roundOne(price),\r\n      price: mul * round(optionPrice * quantity),\r\n      profit: mul * round((optionPrice - initial) * quantity),\r\n    });\r\n    price += interval;\r\n  }\r\n  return priceArray;\r\n}\r\n","D:\\GraphVega\\src\\components\\chain\\expiries.jsx",[],"D:\\GraphVega\\src\\components\\chain\\positions.jsx",[],"D:\\GraphVega\\src\\components\\chain\\editLayout.jsx",[],"D:\\GraphVega\\src\\components\\analysis\\positions.jsx",["95"],"import React from 'react';\r\nimport {\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Chip\r\n} from '@material-ui/core';\r\n\r\nconst chipStyle = type => {\r\n  return type===\"call\"?\"primary\":\"secondary\";\r\n}\r\n\r\nconst expiry = date => {\r\n  var d = new Date(date);\r\n  var dd = String(d.getDate()).padStart(2, '0');\r\n  var mm = String(d.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n  var yyyy = d.getFullYear();\r\n  const today = mm + '-' + dd + '-' + yyyy;\r\n  return today;\r\n}\r\nconst roundOne = (num) => {\r\n  return Math.round((num + Number.EPSILON) * 10)/10;\r\n}\r\nconst Positions = props => {\r\n  return (\r\n    <Row>\r\n      <Col sm={{span:12}}>\r\n        <Card>\r\n          <CardContent>\r\n            <h5>Positions</h5>\r\n            <Table>\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>TYPE</TableCell>\r\n                  <TableCell>QTY</TableCell>\r\n                  <TableCell>MARK</TableCell>\r\n                  <TableCell>STRIKE</TableCell>\r\n                  <TableCell>EXPIRY</TableCell>\r\n                  <TableCell>IMP VOL</TableCell>\r\n                  <TableCell>VEGA</TableCell>\r\n                  <TableCell>THETA</TableCell>\r\n                  <TableCell>DELTA</TableCell>\r\n                  <TableCell>GAMMA</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {props.positions.map((option) => (\r\n                  <TableRow>\r\n                    <TableCell>\r\n                      <Chip label={option.option_type} color={chipStyle(option.option_type)}/>\r\n                    </TableCell>\r\n                    <TableCell>{option.quantity}</TableCell>\r\n                    <TableCell>{(option.bid + option.ask)/2}</TableCell>\r\n                    <TableCell>{option.strike}</TableCell>\r\n                    <TableCell>{expiry(option.expiration_date)}</TableCell>\r\n                    <TableCell>{roundOne(option.greeks.smv_vol*100)}%</TableCell>\r\n                    <TableCell>{option.greeks.vega}</TableCell>\r\n                    <TableCell>{option.greeks.theta}</TableCell>\r\n                    <TableCell>{option.greeks.delta}</TableCell>\r\n                    <TableCell>{option.greeks.gamma}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n                {(props.quantity && props.quantity != 0) ? \r\n                  <TableRow>\r\n                    <TableCell>\r\n                      <Chip label={\"shares\"} />\r\n                    </TableCell>\r\n                    <TableCell>{props.quantity}</TableCell>\r\n                    <TableCell>{(props.quote.ask + props.quote.bid)/2}</TableCell>\r\n                    <TableCell>--</TableCell>\r\n                    <TableCell>--</TableCell>\r\n                    <TableCell>--</TableCell>\r\n                    <TableCell>--</TableCell>\r\n                    <TableCell>--</TableCell>\r\n                    <TableCell>{props.quantity}</TableCell>\r\n                    <TableCell>--</TableCell>\r\n                  </TableRow>\r\n                : \"\"\r\n                }\r\n              </TableBody>\r\n            </Table>\r\n            {/* SHARES OWNED: {props.quantity} */}\r\n          </CardContent>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  )\r\n}\r\n\r\nexport default Positions;","D:\\GraphVega\\src\\components\\chain\\optionTable.jsx",[],"D:\\GraphVega\\src\\components\\analysis\\lineChart.jsx",["96"],"import React from \"react\";\r\nimport {\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Label,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport {\r\n  Card,\r\n  CardContent\r\n} from '@material-ui/core';\r\nimport {\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst LineChart = (props) => {\r\n\r\n  const data = props.data ? props.data : [];\r\n\r\n  const gradientOffset = () => {\r\n    const dataMax = Math.max(...data.map((i) => i.profit));\r\n    const dataMin = Math.min(...data.map((i) => i.profit));\r\n\r\n    if (dataMax <= 0){\r\n      return 0\r\n    }\r\n    else if (dataMin >= 0){\r\n      return 1\r\n    }\r\n    else{\r\n      return dataMax / (dataMax - dataMin);\r\n    }\r\n  }\r\n  \r\n  const off = gradientOffset();\r\n\r\n  return(\r\n    <Card>\r\n      <CardContent>\r\n        <Row>\r\n          <Col sm={{span:12}}>\r\n            <h5>\r\n              Profit & Loss Chart\r\n            </h5>\r\n          </Col>\r\n        </Row>\r\n        \r\n        <Row>\r\n          <Col sm={{span:12}} >\r\n            <AreaChart\r\n              height={600}\r\n              width={900}\r\n              data={data}\r\n              margin={{ top: 20, right: 0, left: 0, bottom: 0 }}\r\n            >\r\n              <CartesianGrid strokeDasharray=\"3 3\"/>\r\n              <XAxis dataKey=\"label\">\r\n                <Label value=\"Stock price\" offset={0} position=\"insideBottom\"/>\r\n              </XAxis>\r\n              <YAxis label={{ value: 'Profit', angle: -90, position: 'insideLeft', textAnchor: 'middle' }}/>\r\n              <Tooltip/>\r\n              <defs>\r\n                <linearGradient id=\"splitColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                  <stop offset={off} stopColor=\"green\" stopOpacity={1}/>\r\n                  <stop offset={off} stopColor=\"red\" stopOpacity={1}/>\r\n                </linearGradient>\r\n              </defs>\r\n              <Area type=\"monotone\" dataKey=\"profit\" stroke=\"#000\" fill=\"url(#splitColor)\" />\r\n            </AreaChart>\r\n          </Col>\r\n        </Row>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default LineChart;","D:\\GraphVega\\src\\components\\chain\\editLayoutModal.jsx",["97"],"import React, { Component, useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  ButtonGroup,\r\n} from 'react-bootstrap';\r\nimport {\r\n  Button\r\n} from '@material-ui/core';\r\nimport {\r\n  Add,\r\n  Remove,\r\n  ArrowUpward,\r\n  ArrowDownward,\r\n} from '@material-ui/icons';\r\n\r\nconst EditLayoutModal = props => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setTimeout(() => {\r\n      props.onClose();\r\n    }, 500);\r\n  };\r\n  const handleShow = () => setShow(true);\r\n\r\n  return (\r\n    <>\r\n      <Button onClick={handleShow} variant=\"outlined\" color=\"primary\">\r\n        Edit Layout\r\n      </Button>\r\n\r\n      <Modal\r\n        size=\"lg\"\r\n        show={show}\r\n        onHide={handleClose}\r\n        style={{ background: \"rgba(0, 0, 0,0.5)\" }}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Edit Layout</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Row>\r\n            <Col lg={6}>\r\n              <center>\r\n                <h5>Layout options</h5>\r\n              </center>\r\n              <Table size=\"sm\">\r\n                <tbody>\r\n                  {props.layoutOptions.map((item, index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{item}</td>\r\n                        <th style={{ textAlign: \"right\" }}>\r\n                          <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              props.onAddLayoutItem(index);\r\n                            }}\r\n                          >\r\n                            <Add fontSize=\"small\"/>\r\n                          </Button>\r\n                        </th>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n            <Col lg={6}>\r\n              <center>\r\n                <h5>Current Layout</h5>\r\n              </center>\r\n              <Table size=\"sm\">\r\n                <tbody>\r\n                  {props.layout.map((item, index) => {\r\n                    return (\r\n                      <tr key={index}>\r\n                        <td>{item}</td>\r\n                        <th style={{ textAlign: \"right\" }}>\r\n                          <Button\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              props.onRemoveLayoutItem(index);\r\n                            }}\r\n                          >\r\n                            <Remove fontSize=\"small\"/>\r\n                          </Button>\r\n                          &nbsp;\r\n                          <ButtonGroup>\r\n                            <Button\r\n                              size=\"small\"\r\n                              onClick={() => {\r\n                                props.onMoveUp(index);\r\n                              }}\r\n                            >\r\n                              <ArrowUpward fontSize=\"small\"/>\r\n                            </Button>\r\n                            <Button\r\n                              size=\"small\"\r\n                              onClick={() => {\r\n                                props.onMoveDown(index);\r\n                              }}\r\n                            >\r\n                              <ArrowDownward fontSize=\"small\"/>\r\n                            </Button>\r\n                          </ButtonGroup>\r\n                        </th>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </Table>\r\n            </Col>\r\n          </Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n          &emsp;\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            onClick={() => {\r\n              setShow(false);\r\n              props.onSaveLayout();\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditLayoutModal;","D:\\GraphVega\\src\\components\\chain\\option.jsx",["98","99","100","101","102"],"import React, { useState } from \"react\";\r\nimport {\r\n  Modal,\r\n  Table,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport {\r\n  Add,\r\n  Remove,\r\n  \r\n} from '@material-ui/icons';\r\n\r\nconst Option = props => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setTimeout(() => {\r\n    }, 500);\r\n  };\r\n  const handleShow = () => setShow(true);\r\n\r\n  const [quantity, setQuantity] = useState(0);\r\n\r\n  const add = () => {\r\n    setShow(false);\r\n    const position = quantity > 0 ? \"long\" : \"short\";\r\n    props.onAddPosition(props.index, props.option[\"option_type\"], position, quantity);\r\n    // const quantity = 0;\r\n    setQuantity(0);\r\n  };\r\n\r\n  const setAlign = () => {\r\n    return props.option[\"option_type\"] === \"put\" ? \"right\" : \"left\";\r\n  };\r\n\r\n  const getColor = () => {\r\n    return props.option.change >= 0 ? \"text-success\" : \"text-danger\";\r\n  };\r\n\r\n  const setSign = () => {\r\n    return props.option.change > 0 ? \"+\" : \"\";\r\n  };\r\n\r\n  const setBackground = () => {\r\n    if(props.option.option_type === \"put\"){\r\n      return props.option.strike > props.quote.last ? \"#E0EBFD\":\"white\";\r\n    }\r\n    else{\r\n      return props.option.strike > props.quote.last ? \"white\": \"#E0EBFD\";\r\n    }\r\n  };\r\n\r\n  const setBorder = idx => {\r\n    if(props.option.option_type===\"put\" && idx == props.layout.length-1) {\r\n      const style = {};\r\n      style.borderRight = props.option.strike > props.quote.last ? \"6px solid #3f51b5\":\"\";\r\n      return style;\r\n    }\r\n    else if (props.option.option_type===\"call\" && idx == 0){\r\n      const style = {};\r\n      style.borderLeft = props.option.strike < props.quote.last ? \"10px solid #3f51b5\":\"\";\r\n      return style;\r\n    }\r\n  };\r\n\r\n  const displayItem = data => {\r\n    return data ? data : \"N/A\";\r\n  }\r\n\r\n  const addOption = () => {\r\n    setQuantity(quantity + 1);\r\n  }\r\n  const removeOption = () => {\r\n    setQuantity(quantity - 1);\r\n  }\r\n\r\n  const changeQuantity = (event, value) => {\r\n    var quantity = Number(event.target.value);\r\n    setQuantity(quantity)\r\n  }\r\n\r\n  const setButtonColor = () => {\r\n    if(quantity >= 0)\r\n      return \"primary\";\r\n    else\r\n      return \"secondary\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <tr style={{ textAlign: 'center'}} onClick={handleShow}>\r\n        {props.layout.map((item, index) => {\r\n          return <td style={setBorder(index)}>{displayItem(props.option[item.toString()])}</td>;\r\n        })}\r\n      </tr>\r\n\r\n      <Modal\r\n        size=\"lg\"\r\n        show={show}\r\n        onHide={handleClose}\r\n        style={{ background: \"rgba(0, 0, 0,0.5)\" }}\r\n      >\r\n        <Modal.Body closeButton>\r\n\r\n          <Row>\r\n\t\t\t\t\t\t<Col\r\n\t\t\t\t\t\t\tlg={{ span: 12 }}\r\n\t\t\t\t\t\t\tstyle={{ clear: 'both', textAlign: 'center' }}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<h4 style={{ display: 'inline' }}>\r\n\t\t\t\t\t\t\t\t<b>{props.option.description}</b>\r\n\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t<br />\r\n\t\t\t\t\t\t\t<h4 style={{ display: 'inline' }}>{props.option.last}</h4>\r\n\t\t\t\t\t\t\t&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t<h5 className={getColor()} style={{ display: 'inline' }}>\r\n\t\t\t\t\t\t\t\t{setSign()}{props.option.change}\r\n\t\t\t\t\t\t\t</h5>\r\n\t\t\t\t\t\t\t&nbsp;&nbsp;\r\n\t\t\t\t\t\t\t<h5 className={getColor()} style={{ display: 'inline' }}>\r\n\t\t\t\t\t\t\t\t({setSign()}{props.option.change_percentage}%)\r\n\t\t\t\t\t\t\t</h5>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n          <br />\r\n          <Row style={{ fontSize: '0.8rem' }}>\r\n\t\t\t\t\t\t<Col lg={{ span: 5, offset: 1 }}>\r\n\t\t\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t\t\t<tbody>\r\n                  <tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Bid</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>{props.option.bid}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Ask</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>{props.option.ask}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n                  <tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Open</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>{props.option.open}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Previous Close</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>{props.option.prevclose}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n                  <tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Open Interest</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>{props.option.open_interest}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t</Col>\r\n\r\n\t\t\t\t\t\t<Col lg={{ span: 5 }}>\r\n\t\t\t\t\t\t\t<Table>\r\n\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Implied Volatility</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>{props.option.greeks.mid_iv}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Delta</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b> {props.option.greeks.delta}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Gamma</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b>{props.option.greeks.gamma}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Theta</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b> {props.option.greeks.theta}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n                  <tr>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'left' }}>Vega</td>\r\n\t\t\t\t\t\t\t\t\t\t<td style={{ textAlign: 'right' }}>\r\n\t\t\t\t\t\t\t\t\t\t\t<b> {props.option.greeks.vega}</b>\r\n\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t</Table>\r\n\t\t\t\t\t\t</Col>\r\n\t\t\t\t\t</Row>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <IconButton color=\"secondary\" >\r\n            <Remove onClick={removeOption}/>\r\n          </IconButton>\r\n          <TextField\r\n            size=\"small\"\r\n            value={quantity}\r\n            defaultValue={0}\r\n            onChange={changeQuantity}\r\n            inputProps={{ maxLength: \"4px\" }}\r\n            label=\"# of contracts\" \r\n            variant=\"outlined\" \r\n          />\r\n          <IconButton color=\"primary\">\r\n            <Add onClick={addOption}/>\r\n          </IconButton>\r\n          <Button\r\n            color={setButtonColor()}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            disabled={quantity==0}\r\n            onClick={() => add()}\r\n          >\r\n            {quantity >= 0 ? \"Buy\" : \"Sell\"}\r\n          </Button>\r\n          &nbsp;\r\n          <Button \r\n            onClick={handleClose} \r\n            size=\"small\">\r\n            &nbsp;\r\n            <b>Close</b>\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Option;\r\n",{"ruleId":"103","severity":1,"message":"104","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":17},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":85,"column":14,"nodeType":"113","messageId":"114","endLine":85,"endColumn":16},{"ruleId":"103","severity":1,"message":"115","line":78,"column":7,"nodeType":"105","messageId":"106","endLine":78,"endColumn":14},{"ruleId":"103","severity":1,"message":"116","line":1,"column":7,"nodeType":"105","messageId":"106","endLine":1,"endColumn":16},{"ruleId":"111","severity":1,"message":"112","line":48,"column":15,"nodeType":"113","messageId":"114","endLine":48,"endColumn":17},{"ruleId":"111","severity":1,"message":"112","line":71,"column":52,"nodeType":"113","messageId":"114","endLine":71,"endColumn":54},{"ruleId":"103","severity":1,"message":"117","line":10,"column":3,"nodeType":"105","messageId":"106","endLine":10,"endColumn":22},{"ruleId":"103","severity":1,"message":"118","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"119","line":38,"column":9,"nodeType":"105","messageId":"106","endLine":38,"endColumn":17},{"ruleId":"103","severity":1,"message":"120","line":50,"column":9,"nodeType":"105","messageId":"106","endLine":50,"endColumn":22},{"ruleId":"111","severity":1,"message":"121","line":60,"column":48,"nodeType":"113","messageId":"114","endLine":60,"endColumn":50},{"ruleId":"111","severity":1,"message":"121","line":65,"column":55,"nodeType":"113","messageId":"114","endLine":65,"endColumn":57},{"ruleId":"111","severity":1,"message":"121","line":228,"column":31,"nodeType":"113","messageId":"114","endLine":228,"endColumn":33},"no-unused-vars","'Bootstrap' is defined but never used.","Identifier","unusedVar","no-native-reassign",["122"],"no-negated-in-lhs",["123"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'options' is assigned a value but never used.","'parseDate' is assigned a value but never used.","'ResponsiveContainer' is defined but never used.","'Component' is defined but never used.","'setAlign' is assigned a value but never used.","'setBackground' is assigned a value but never used.","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation"]